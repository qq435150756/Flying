apply plugin: 'com.android.application'

android {
    /* 编译SDK版本 */
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    /* 构建工具版本 */
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    /* 使用类库 */
    useLibrary 'org.apache.http.legacy'

    /* Java插件版本设置 */
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    /* 默认配置 */
    defaultConfig {
        /* 应用Id */
        applicationId "cn.com.flying.darkholelearning"
        /* 运行支持最低SDK版本 */
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        /* 向前兼容目标版本SDK版本 */
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        /* 应用版本Code */
        versionCode rootProject.ext.android["versionCode"]
        /* 应用版本名称 */
        versionName rootProject.ext.android["versionName"]
        /* JUit自动化测试框架 */
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        /* 设置 ArchivesBaseName,打包的名称  */
        //setProperty("archivesBaseName", "DarkHole_${versionName}_${versionCode}")

        /* 配置ndkBuild,指令参数配置 */
//        externalNativeBuild {
//            /* CMake指令 */
//            cmake {
//                cppFlags ""
//            }
//        }

        /* NDK支持CPU类型 */
//        ndk {
//            abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a' //,'armeabi'//不支持armeabi
//        }
        /* 矢量图 */
//        vectorDrawables.useSupportLibrary = true
    }

    /* 将签名密钥信息写在本地local.properties中*/
    //加载资源
//    Properties properties = new Properties()
//    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
//    properties.load(inputStream)
//    //读取文件
//    def keyDir = properties.getProperty('key.file')
//    //读取字段
//    def key_file = file(keyDir)
//    def key_keyAlias = properties.getProperty('keyAlias')
//    def key_keyPassword = properties.getProperty('keyPassword')
//    def key_storePassword = properties.getProperty('storePassword')
//
//    /* 签名配置 */
//    signingConfigs {
//        debug {
//            storeFile key_file
//            storePassword key_storePassword
//            keyAlias key_keyAlias
//            keyPassword key_keyPassword
//        }
//
//        release {
//            //密钥仓库文件
//            storeFile key_file
//            //密钥仓库文件密码
//            storePassword key_storePassword
//            //密钥别名
//            keyAlias key_keyAlias
//            //密钥密码
//            keyPassword key_keyPassword
//        }
//    }
    signingConfigs {
        config {
            keyAlias 'box'
            keyPassword '7660454'
            storeFile file('ki.keystore')
            storePassword '7660454'
        }
    }
    /* 构建类型配置 */
    buildTypes {
        /* 测试版本 */
        debug {
            /* 自定义buildType */
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            /* 是否开启代码混淆，默认false */
            minifyEnabled false
            /* 是否应该生成可调试的apk */
            //debuggable true
            /* 混淆规则配置文件 */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            /* 签名配置 */
         //   signingConfig signingConfigs.config
        }
        /* 生产版本 */
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true
            /* 移除无用的resource文件 */
            shrinkResources true
            /* 对打包的应用程序进行优化 */
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        /* 预生产版本 */
        /* 从给定的构建类型复制所有属性 */
//        pre.initWith(release)
//        pre {
//            buildConfigField "boolean", "USE_CANARY", "true"
//            /* 定义多个构建类型 */
//            matchingFallbacks = ['pre', 'debug', 'release']
//        }
    }
    /* 配置ndkBuild,路径版本配置 */
//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//            version "3.10.2"
//        }
//    }

    /* lint检查 */
    lintOptions {
        /* 关闭指定问题检查 */
        disable 'InvalidPackage'
        disable "ResourceType"
        /* true--错误发生后停止gradle构建 */
        abortOnError false
    }
    /* 设置资源路径 */
//    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}

/* 依赖 */
dependencies {
    /* 依赖文件夹及类型 */
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //androidx
    implementation rootProject.ext.dependencies["cardview"]

    //tools
    //注意 Arms 核心库现在并不会依赖某个 EventBus, 要想使用 EventBus, 还请在项目中自行依赖对应的 EventBus
    //现在支持两种 EventBus, greenrobot 的 EventBus 和畅销书 《Android源码设计模式解析与实战》的作者 何红辉 所作的 AndroidEventBus
    //依赖后 Arms 会自动检测您依赖的 EventBus 并自动注册
    //建议使用 AndroidEventBus, 特别是组件化项目, 原因请看 https://github.com/hehonghui/AndroidEventBus/issues/49
    //这种做法可以让使用者有自行选择三方库的权利, 并且还可以减轻 Arms 的体积
    implementation rootProject.ext.dependencies["androideventbus"]
//    implementation rootProject.ext.dependencies["eventbus"]

    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    implementation rootProject.ext.dependencies["lifecyclemodel"]

    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'annotation'
    }
    implementation(rootProject.ext.dependencies["paginate"]) {
        exclude module: 'recyclerview'
    }

    //arms
    implementation 'me.jessyan:arms:2.5.2'

    //Arms 核心库不再包含 AndroidAutoLayout, 现在可自行选择屏幕适配方案, 不想使用 AndroidAutoLayout 就不要依赖 arms-autolayout
    implementation 'me.jessyan:arms-autolayout:2.5.2'

    //现在已经将 Demo 中的屏幕适配框架从 AndroidAutoLayout 替换为 AndroidAutoSize, AndroidAutoLayout 和 AndroidAutoSize 可以在项目中共存
    //所以旧项目只要依赖 arms-autolayout 即可兼容之前的旧页面, 新页面可以使用 AndroidAutoSize 进行适配, 等有时间了再将旧页面全部替换为 AndroidAutoSize
    implementation rootProject.ext.dependencies["autosize"]

    //Arms 核心库不再包含 Glide, 想使用其他图片加载框架或者想自行扩展 ImageLoaderStrategy 就不要依赖 arms-imageloader-glide
    //依赖 arms-imageloader-glide 后还需要在 GlobalConfiguration 中手动注册 GlideImageLoaderStrategy
    implementation 'me.jessyan:arms-imageloader-glide:2.5.2'

    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
}
